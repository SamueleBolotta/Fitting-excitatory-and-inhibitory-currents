clear
clc
close all

[EPSC, t] = generate_E(20,0.7,2, 120); % Generate simulated excitatory current

% Starting values
Vm = -70;
EChl = -70;
EGlu = 0;

True_values = {20,0.7,2}; % These are the "real" values we'll try to fit

% Initial values for fitting
gmg = 1 + (150-1) .* rand(1,1); tde = 0 + (20-1) .* rand(1,1); tre = 0 + (20-1) .* rand(1,1);

zmax = 50; % number of iterations

% Preallocation
final_Ge = zeros(1,zmax);
final_tau_decay_e = zeros(1,zmax);
final_tau_rise_e = zeros(1,zmax);

% 50 iterations
for z = 1:zmax
    
    %% Fit model to data
    % Apply white noise to the EPSC - every time again, in order to have
    % different values for the noise each iteration. You can change the
    % number: the higher the number, the less the noise.
    y = awgn(EPSC,5,'measured');
    
    %% Perform fit
    [xData, yData] = prepareCurveData(t, y);
    % Set up fittype and options.
    ft = fittype( '((Ge) .* (tau_rise_e * tau_decay_e / (tau_rise_e - tau_decay_e)) * ((exp(-t / tau_rise_e)) - exp(-t / tau_decay_e)) * (Vm - EGlu))', 'independent', 't', 'dependent', 'y' );
    opts = fitoptions( 'Method', 'NonlinearLeastSquares', 'MaxIter', 5000);
    opts.Display = 'notify';
    
    % Realistic values
    if z == 1 % On the first iteration, we want to get a plot just to have an idea as to what's going on
        opts.Lower      = [0 1   -70 0 0 ];
        opts.StartPoint = [0 gmg  -70 tde tre ]; % Starting values
        opts.Upper      = [0 150 -70 20 20 ]; 
        
        [fitresult1, gof1(z)] = fit(xData, yData, ft, opts)
        
        final_Ge(z) = fitresult1.Ge;
        final_tau_decay_e(z) = fitresult1.tau_decay_e;
        final_tau_rise_e(z) = fitresult1.tau_rise_e;

        % Plot the solution
        EPSC_fit = ((fitresult1.Ge) .* (fitresult1.tau_rise_e * fitresult1.tau_decay_e / (fitresult1.tau_rise_e - fitresult1.tau_decay_e)) * ((exp(-t / fitresult1.tau_rise_e)) - exp(-t / fitresult1.tau_decay_e)) * (Vm - EGlu));
        
    else % On every subsequent iteration, we add everything to the previous matrices we created
        opts.Lower      = [0 1   -70 0  0 ];
        opts.StartPoint = [0 gmg  -70 tde tre ]; % Starting values [-70 0 gmc gmg -30 tde tdi tre tri];
        opts.Upper      = [0 150 -70 20 5 ];         
        
        [fitresult1, gof1(z)] = fit(xData, yData, ft, opts)
        
        final_Ge(z) = fitresult1.Ge;
        final_tau_decay_e(z) = fitresult1.tau_decay_e;
        final_tau_rise_e(z) = fitresult1.tau_rise_e;
    end
end
