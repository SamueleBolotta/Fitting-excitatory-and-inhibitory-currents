clear
clc
close all

[IPSC, t] = generate_I(30,3.7,6.2, 120); % Generate simulated inhibitory current

% Starting values
Vm = 0;
EChl = -70;
EGlu = 0;

True_values = {30,6.2,3.7}; % These are the "real" values we'll try to fit

% Initial values for fitting
gmc = 1 + (150-1) .* rand(1,1); tdi = 1 + (20-1) .* rand(1,1); tri = 1 + (5-1) .* rand(1,1);

zmax = 50; % number of iterations

% Preallocation
final_Gi = zeros(1,zmax);
final_tau_decay_i = zeros(1,zmax);
final_tau_rise_i = zeros(1,zmax);

% 50 iterations
for z = 1:zmax
    
    %% Fit model to data
    % Apply white noise to the CPSC - every time again, in order to have
    % different values for the noise each iteration. You can change the
    % number: the higher the number, the less the noise.
    y = awgn(IPSC,5,'measured');
    
    %% Perform fit
    [xData, yData] = prepareCurveData(t, y);
    % Set up fittype and options.
    ft = fittype( '((Gi) .* (tau_rise_i * tau_decay_i / (tau_rise_i - tau_decay_i)) * ((exp(-t / tau_rise_i)) - exp(-t / tau_decay_i)) * (Vm - EChl))', 'independent', 't', 'dependent', 'y' );
    opts = fitoptions( 'Method', 'NonlinearLeastSquares', 'MaxIter', 5000);
    opts.Display = 'notify';
    
    % Realistic values
    if z == 1 % On the first iteration, we want to get a plot just to have an idea as to what's going on
        opts.Lower      = [-70 1   0 1  0 ];
        opts.StartPoint = [-70 gmc  0 tdi tri ]; % Starting values
        opts.Upper      = [-70 150 0 20 20 ];
        
        [fitresult1, gof1(z), resnorm] = fit(xData, yData, ft, opts)
        
        final_Gi(z) = fitresult1.Gi;
        final_tau_decay_i(z) = fitresult1.tau_decay_i;
        final_tau_rise_i(z) = fitresult1.tau_rise_i;
        
        % Plot the solution
        IPSC_fit = ((fitresult1.Gi) .* (fitresult1.tau_rise_i * fitresult1.tau_decay_i / (fitresult1.tau_rise_i - fitresult1.tau_decay_i)) * ((exp(-t / fitresult1.tau_rise_i)) - exp(-t / fitresult1.tau_decay_i)) * (Vm - EChl));

    else % On every subsequent iteration, we add everything to the previous matrices we created
        opts.Lower      = [-70 1   0 1  0 ];
        opts.StartPoint = [-70 gmc  0 tdi tri ]; % Starting values
        opts.Upper      = [-70 150 0 20 20 ];
        
        [fitresult1, gof1(z)] = fit(xData, yData, ft, opts)
        
        final_Gi(z) = fitresult1.Gi;
        final_tau_decay_i(z) = fitresult1.tau_decay_i;
        final_tau_rise_i(z) = fitresult1.tau_rise_i;
    end
end

